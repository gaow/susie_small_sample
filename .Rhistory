res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
}
temp <- do.call (rbind ,res)
sum( temp[,1] )/sum( temp[,2] )
dim(temp
)
coverage <-  c()
for ( i in 1:10){
coverage <- c(coverage, sum( temp[which(temp[,3]==i),1] )/sum( temp[which(temp[,3]==i),2] ) )
}
coverage
library(susieR
)
N <- 20
set.seed(123)
res <- list( )
data(N3finemapping)
h=1
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
res
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect   )
print( res[[h]])
h=h+1
}
}
out$sets
out$sets$cs[[1]]
out$sets$
as
out$sets
out$sets$cs[[1]][[1]]
?susie
# susie example
set.seed(1)
n = 1000
p = 1000
beta = rep(0,p)
beta[1:4] = 1
X = matrix(rnorm(n*p),nrow = n,ncol = p)
X = scale(X,center = TRUE,scale = TRUE)
y = drop(X %*% beta + rnorm(n))
res1 = susie(X,y,L = 10)
susie_get_cs(res1) # extract credible sets from fit
plot(beta,coef(res1)[-1])
abline(a = 0,b = 1,col = "skyblue",lty = "dashed")
plot(y,predict(res1))
abline(a = 0,b = 1,col = "skyblue",lty = "dashed")
# susie_suff_stat example
input_ss = compute_suff_stat(X,y)
res2 = with(input_ss,
susie_suff_stat(XtX = XtX,Xty = Xty,yty = yty,n = n,
X_colmeans = X_colmeans,y_mean = y_mean,L = 10))
plot(coef(res1),coef(res2))
abline(a = 0,b = 1,col = "skyblue",lty = "dashed")
[Package su
res1$sets
res1$sets[[1]]
lengths(res1$sets)
lengths(res1$sets[[1]])
source("C:/Document/Serieux/Travail/Data_analysis_and_papers/small_susie/susie_small_n20.R")
library(susieR
)
N <- 20
set.seed(123)
res <- list( )
data(N3finemapping)
h=1
for ( i in (length(res)+1):10000){
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  3*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect, mean (lengths(res1$sets[[1]])  ) )
print( res[[h]])
h=h+1
}
}
}
temp <- do.call (rbind ,res)
save(temp, file="small_sample_susie20_h25.RData")
library(susieR
)
N <- 20
set.seed(123)
res <- list( )
data(N3finemapping)
h=1
for ( i in (length(res)+1):10000){
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  1*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect, mean (lengths(res1$sets[[1]])  ) )
print( res[[h]])
h=h+1
}
}
}
temp <- do.call (rbind ,res)
save(temp, file="small_sample_susie20_h50.RData")
library(susieR
)
N <- 20
set.seed(123)
res <- list( )
data(N3finemapping)
h=1
for ( i in (length(res)+1):10000){
L <- sample (1:10, size=1)
X <- N3finemapping$X
X <- N3finemapping$X[sample (1:nrow(X), size=N, replace=FALSE),]
true_pos <- sample( 1:ncol(X), L)
if( L==1){
if (var( X[,true_pos])==0) next
y <- X[, true_pos]
}else{
y <- apply( X[, true_pos],1, sum)
}
y <- y + rnorm( N, sd=  2*( sd(y)))
if (var (y)>0.00001){
out <-  susie(X,y, L=1 )
out$sets
if(!is.null(out$sets$cs)){
n_true_cs <-   Reduce("+",sapply(1:length(out$sets$cs), function(k)
ifelse( length(which(true_pos%in%out$sets$cs[[k]] ))==0, 0,1)
))
n_cs   <-    length(  out$sets$cs  )
n_effect <- length(true_pos)
res [[h]] <- c( n_true_cs ,   n_cs,n_effect, mean (lengths(res1$sets[[1]])  ) )
print( res[[h]])
h=h+1
}
}
}
temp <- do.call (rbind ,res)
save(temp, file="small_sample_susie20_h30.RData")
sum( temp[,1] )/sum( temp[,2] )
dim(temp
)
coverage <-  c()
for ( i in 1:10){
coverage <- c(coverage, sum( temp[which(temp[,3]==i),1] )/sum( temp[which(temp[,3]==i),2] ) )
}
coverage
source("C:/Document/Serieux/Travail/Data_analysis_and_papers/small_susie/susie_small_n10.R")
source("C:/Document/Serieux/Travail/Data_analysis_and_papers/small_susie/susie_small_n50.R")
